generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tecnico {
  id           Int     @id @default(autoincrement()) @map("id_tecnico")
  nombre       String
  email        String  @unique
  passwordHash String
  status       Boolean @default(true)
}

model Empresa {
  id     Int    @id @default(autoincrement()) @map("id_empresa")
  nombre String @unique
}

model Visita {
  id                 Int          @id @default(autoincrement()) @map("id_visita")
  empresaId          Int
  tecnicoId          Int
  solicitante        String
  inicio             DateTime
  fin                DateTime?
  confImpresoras     Boolean      @default(false)
  confTelefonos      Boolean      @default(false)
  confPiePagina      Boolean      @default(false)
  otros              Boolean      @default(false)
  otrosDetalle       String?
  status             EstadoVisita @default(PENDIENTE)
  solicitanteId      Int?
  actualizaciones    Boolean      @default(false)
  antivirus          Boolean      @default(false)
  ccleaner           Boolean      @default(false)
  estadoDisco        Boolean      @default(false)
  licenciaOffice     Boolean      @default(false)
  licenciaWindows    Boolean      @default(false)
  mantenimientoReloj Boolean      @default(false)
  rendimientoEquipo  Boolean      @default(false)

  @@index([tecnicoId])
  @@index([empresaId])
  @@index([solicitanteId])
}

model RefreshToken {
  id                Int       @id @default(autoincrement())
  userId            Int
  rtHash            String
  createdAt         DateTime  @default(now())
  expiresAt         DateTime
  revokedAt         DateTime?
  replacedByTokenId Int?
  userAgent         String?
  ip                String?

  @@index([rtHash])
  @@index([userId])
}

model Solicitante {
  id        Int     @id @default(autoincrement()) @map("id_solicitante")
  nombre    String
  email     String? @unique
  telefono  String?
  empresaId Int

  @@index([empresaId])
}

model Historial {
  tecnicoId          Int
  solicitante        String
  inicio             DateTime
  fin                DateTime
  realizado          String?
  solicitanteId      Int
  actualizaciones    Boolean  @default(false)
  antivirus          Boolean  @default(false)
  ccleaner           Boolean  @default(false)
  estadoDisco        Boolean  @default(false)
  licenciaOffice     Boolean  @default(false)
  licenciaWindows    Boolean  @default(false)
  mantenimientoReloj Boolean  @default(false)
  rendimientoEquipo  Boolean  @default(false)
  id_historial       Int      @id @default(autoincrement())

  @@index([solicitanteId])
  @@index([tecnicoId])
}

model Equipo {
  id            Int    @id @default(autoincrement()) @map("id_equipo")
  idSolicitante Int
  serial        String  
  marca         String
  modelo        String
  procesador    String
  ram           String
  disco         String
  propiedad     String

  @@index([idSolicitante])
}

model DetalleEquipo {
  id_detalle_equipo Int       @id @default(autoincrement())
  idEquipo          Int
  macWifi           String?
  so                String?
  tipoDd            String?
  estadoAlm         String?
  office            String?
  correo            String?
  teamViewer        String?
  claveTv           String?
  revisado          DateTime?

  @@index([idEquipo])
}

model FreshdeskCompanyMap {
  companyId BigInt  @id
  empresaId Int
  domain    String?

  @@index([domain])
  @@index([empresaId])
}

model FreshdeskRequesterMap {
  requesterId   BigInt @id
  solicitanteId Int
  empresaId     Int

  @@index([empresaId])
  @@index([solicitanteId])
}

model FreshdeskTicket {
  id             BigInt    @id
  subject        String
  status         Int
  priority       Int
  type           String?
  requesterEmail String?
  createdAt      DateTime
  updatedAt      DateTime
  source         String?
  capturedAt     DateTime?
  empresaId      Int?
  solicitanteId  Int?

  @@index([createdAt])
  @@index([empresaId])
  @@index([requesterEmail])
  @@index([solicitanteId])
}

enum EstadoVisita {
  PENDIENTE
  COMPLETADA
  CANCELADA
}
